% Copyright

implement main
    open core, file, stdio

domains
    genre = история; драма; фантастика; комедия; ужасы; военный; фэнтези.
    афиша = афиша(string Название_кнофильма, string Дата_сеанса, string Время_сеанса, integer Цена_билета).
    показжанр = показжанр(string Название_кинотеатра, string Адрес, string Название_кинофильма).

class facts - kino
    кинотеатр : (integer IdКинотеатра, string НазваниеКинотеатра, string Адрес, string Телефон, integer КоличествоМест).
    кинофильм : (integer IdКинофильма, string НазваниеКинофильма, integer Год, string Режисер, genre Жанр).
    показывают : (integer IdКинотеатра, integer IdКинофильма, string Дата, string Время, integer Выручка, integer ЦенаБилета).

% Вспомогательные предикаты
class predicates
    длина : (A*) -> integer N.
    сумма_элементов : (real* List) -> real Sum.
    среднее_списка : (real* List) -> real Average determ.

clauses
    длина([]) = 0.
    длина([_ | T]) = длина(T) + 1.

    сумма_элементов([]) = 0.
    сумма_элементов([H | T]) = сумма_элементов(T) + H.

    среднее_списка(L) = сумма_элементов(L) / длина(L) :-
        длина(L) > 0.

class predicates
    адрес_кинотеатра : (string НазваниеКинотеатра) -> string* Адреса.
    кинотеатр_показывающий_фильм : (string НазваниеКинофильма) -> string* Названия determ.
    режисёр_фильма : (string НазваниеКинофильма) -> string* Названия determ.
    количество_мест_в_кинотеатре : (integer IdКинотеатра) -> integer* Количество determ.
    название_кинотеатра_показывающего_фильм_определенного_жанра : (genre Жанр) -> показжанр* Название.
    выручка : (string НазваниеКинофильма) -> real Выручка determ.
    количество_кинотеатров : (string НазваниеКинофильма) -> integer N determ.
    средняя_цена : (string НазваниеКинофильма) -> real SB determ.
    афиша_кинотеатра : (string НазваниеКинотеатра, string Адрес) -> афиша* Афиша determ.

clauses
% Адрес кинотеатра (по названию кинотеатра)
    адрес_кинотеатра(NK) = AK :-
        !,
        AK = [ A || кинотеатр(_, NK, A, _, _) ].

% Кинотеатр, показывающий определенный кинофильм (по названию кинофильма)
    кинотеатр_показывающий_фильм(NF) = KP :-
        кинофильм(IF, NF, _, _, _),
        !,
        KP =
            [ NK ||
                показывают(IK, IF, _, _, _, _),
                кинотеатр(IK, NK, _, _, _)
            ].

    количество_кинотеатров(NF) = длина(кинотеатр_показывающий_фильм(NF)).

% Режисёр кинофильма (по названию кинофильма)
    режисёр_фильма(NF) = RF :-
        кинофильм(_, NF, _, R, _),
        !,
        RF = [ R || кинофильм(_, NF, _, R, _) ].

% Количество мест в кинотеатре (по ID кинотеатра)
    количество_мест_в_кинотеатре(IK) = K :-
        кинотеатр(IK, _, _, _, KM),
        !,
        K = [ KM || кинотеатр(IK, _, _, _, KM) ].

% Адрес, номер телефона и название кинотеатра, показывающего кинофильм определенного жанра (по жанру кинофильма)
    название_кинотеатра_показывающего_фильм_определенного_жанра(J) = AIK :-
        AIK =
            [ показжанр(NK, A, NF) ||
                показывают(IK, IF, _, _, _, _),
                кинофильм(IF, NF, _, _, J),
                кинотеатр(IK, NK, A, _, _)
            ],
        !.

% Выручка всех кинотеатров с определенного кинофильма (по названию кинофильма)
    выручка(NF) = сумма_элементов([ V || показывают(_, IF, _, _, V, _) ]) :-
        кинофильм(IF, NF, _, _, _),
        !.

% Средняя стоимость билета на определенный кинофильм (по названию кинофильма)
    средняя_цена(NF) = среднее_списка([ SB || показывают(_, IF, _, _, _, SB) ]) :-
        кинофильм(IF, NF, _, _, _),
        !.

    афиша_кинотеатра(NK, A) =
            [ афиша(NF, D, T, C) ||
                показывают(IK, IF, D, T, _, C),
                кинофильм(IF, NF, _, _, _)
            ] :-
        кинотеатр(IK, NK, A, _, _),
        !.

% Вывод на экран время и кинотетра, где показывают фильм
class predicates
    write_afisha : (афиша* Время_И_Кинотетр_и_Цена_билета).
    write_pokasjanr : (показжанр* Название_И_Адрес_Кинотеатра).

clauses
    write_afisha(L) :-
        foreach афиша(NF, D, T, C) = list::getMember_nd(L) do
            Length = string::length(NF),
            if Length > 20 then
                writef(string::format("%53s %s %8s %8d\n", NF, D, T, C))
            else
                writef(string::format("%33s %30s %8s %8d\n", NF, D, T, C))
            end if,
            writef("\t---------------------------------------------+------------+-------+-------------\n")
        end foreach.

    write_pokasjanr(L) :-
        foreach показжанр(NK, A, NF) = list::getMember_nd(L) do
            Length = string::length(NF),
            if Length > 20 then
                writef(string::format("%23s %15s %50s\n", NK, A, NF))
            else
                writef(string::format("%23s %15s %32s\n", NK, A, NF))
            end if,
            writef("\t---------------+-------------------+------------------------------------------------\n")
        end foreach.

clauses
    run() :-
        console::init(),
        reconsult("..\\kino.txt", kino),
        fail.

    run() :-
        NK = "Победа",
        write("\nПравило: Адреса кинотеатра \"", NK, "\"\n"),
        L = адрес_кинотеатра(NK),
        write(L, " \n"),
        write("\n"),
        fail.

    run() :-
        NF = "Грейхаунд",
        write("Правило: Кинотеатр, показывающий кинофильм \"", NF, "\"\n"),
        L = кинотеатр_показывающий_фильм(NF),
        write(L, " \n"),
        write("Количество кинотеатров = "),
        write(количество_кинотеатров(NF), "\n\n"),
        nl,
        fail.

    run() :-
        NF = "Дэдпул",
        write("Правило: Режисер кинофильма \"", NF, "\"\n"),
        L = режисёр_фильма(NF),
        write(L, " \n"),
        nl,
        fail.

    run() :-
        IK = 18,
        write("Правило: Количество мест в кинотеатре с ID \"", IK, "\"\n"),
        L = количество_мест_в_кинотеатре(IK),
        write(L, " \n"),
        nl,
        fail.

    run() :-
        write("Правило: Адрес и название кинотеатра, показывающего кинофильм определенного жанра \n"),
        J = комедия,
        write("Жанр = ", J, "\n"),
        writef(string::format("%21s %15s %35s \n", "Название КТ", " Адрес", "Название КФ")),
        writef("\t---------------+-------------------+------------------------------------------------\n"),
        write_pokasjanr(название_кинотеатра_показывающего_фильм_определенного_жанра(J)),
        write("\n"),
        fail.

    run() :-
        NF = "Тренер",
        write("Правило: Выручка всех кинотеатров за кинофильм: ", NF, "\n"),
        L = выручка(NF),
        write("Выручка = ", L, " \n\n"),
        fail.

    run() :-
        NF = "Шазам: Ярость богов",
        write("Правило: Средняя стоимость билета по всем кинотеатрам на кинофильм: \"", NF, "\"\n"),
        L = средняя_цена(NF),
        write(string::format("Средняя стоимость билета =%8.2f\n", L)),
        fail.

    run() :-
        NK = "City Stars",
        A = "Транспортная ул., 28",
        write("\n\t\tАфиша кинотеатра \"", NK, "\", который находится на ", A, "\n\n"),
        writef(string::format("%35s %26s %10s %13s\n", "Название КФ", "Дата", "Время", "Цена билета")),
        writef("\t---------------------------------------------+------------+-------+-------------\n"),
        write_afisha(афиша_кинотеатра(NK, A)),
        nl,
        fail.

    run() :-
        succeed.

end implement main

goal
    console::run(main::run).
